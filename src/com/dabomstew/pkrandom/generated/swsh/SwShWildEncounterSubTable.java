// automatically generated by the FlatBuffers compiler, do not modify

package com.dabomstew.pkrandom.generated.swsh;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class SwShWildEncounterSubTable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static SwShWildEncounterSubTable getRootAsSwShWildEncounterSubTable(ByteBuffer _bb) { return getRootAsSwShWildEncounterSubTable(_bb, new SwShWildEncounterSubTable()); }
  public static SwShWildEncounterSubTable getRootAsSwShWildEncounterSubTable(ByteBuffer _bb, SwShWildEncounterSubTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SwShWildEncounterSubTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int levelMin() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateLevelMin(int level_min) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, (byte)level_min); return true; } else { return false; } }
  public int levelMax() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateLevelMax(int level_max) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, (byte)level_max); return true; } else { return false; } }
  public com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot slots(int j) { return slots(new com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot(), j); }
  public com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot slots(com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int slotsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot.Vector slotsVector() { return slotsVector(new com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot.Vector()); }
  public com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot.Vector slotsVector(com.dabomstew.pkrandom.generated.swsh.SwShWildEncounterSlot.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSwShWildEncounterSubTable(FlatBufferBuilder builder,
      int level_min,
      int level_max,
      int slotsOffset) {
    builder.startTable(3);
    SwShWildEncounterSubTable.addSlots(builder, slotsOffset);
    SwShWildEncounterSubTable.addLevelMax(builder, level_max);
    SwShWildEncounterSubTable.addLevelMin(builder, level_min);
    return SwShWildEncounterSubTable.endSwShWildEncounterSubTable(builder);
  }

  public static void startSwShWildEncounterSubTable(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addLevelMin(FlatBufferBuilder builder, int levelMin) { builder.addByte(0, (byte)levelMin, (byte)0); }
  public static void addLevelMax(FlatBufferBuilder builder, int levelMax) { builder.addByte(1, (byte)levelMax, (byte)0); }
  public static void addSlots(FlatBufferBuilder builder, int slotsOffset) { builder.addOffset(2, slotsOffset, 0); }
  public static int createSlotsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSlotsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSwShWildEncounterSubTable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SwShWildEncounterSubTable get(int j) { return get(new SwShWildEncounterSubTable(), j); }
    public SwShWildEncounterSubTable get(SwShWildEncounterSubTable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

