// automatically generated by the FlatBuffers compiler, do not modify

package com.dabomstew.pkrandom.generated.swsh;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class SwShTradeEncounter extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static SwShTradeEncounter getRootAsSwShTradeEncounter(ByteBuffer _bb) { return getRootAsSwShTradeEncounter(_bb, new SwShTradeEncounter()); }
  public static SwShTradeEncounter getRootAsSwShTradeEncounter(ByteBuffer _bb, SwShTradeEncounter obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SwShTradeEncounter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int form() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateForm(int form) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, (byte)form); return true; } else { return false; } }
  public int dynamaxLevel() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateDynamaxLevel(int dynamax_level) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, (byte)dynamax_level); return true; } else { return false; } }
  public int ballItemId() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateBallItemId(int ball_item_id) { int o = __offset(8); if (o != 0) { bb.putInt(o + bb_pos, ball_item_id); return true; } else { return false; } }
  public int field03() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateField03(int field_03) { int o = __offset(10); if (o != 0) { bb.putInt(o + bb_pos, field_03); return true; } else { return false; } }
  public long hash0() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateHash0(long hash0) { int o = __offset(12); if (o != 0) { bb.putLong(o + bb_pos, hash0); return true; } else { return false; } }
  public boolean canGigantamax() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateCanGigantamax(boolean can_gigantamax) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)(can_gigantamax ? 1 : 0)); return true; } else { return false; } }
  public int heldItem() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateHeldItem(int held_item) { int o = __offset(16); if (o != 0) { bb.putInt(o + bb_pos, held_item); return true; } else { return false; } }
  public int level() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateLevel(int level) { int o = __offset(18); if (o != 0) { bb.put(o + bb_pos, (byte)level); return true; } else { return false; } }
  public int species() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateSpecies(int species) { int o = __offset(20); if (o != 0) { bb.putInt(o + bb_pos, species); return true; } else { return false; } }
  public long hash1() { int o = __offset(22); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateHash1(long hash1) { int o = __offset(22); if (o != 0) { bb.putLong(o + bb_pos, hash1); return true; } else { return false; } }
  public int trainerId() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateTrainerId(int trainer_id) { int o = __offset(24); if (o != 0) { bb.putInt(o + bb_pos, trainer_id); return true; } else { return false; } }
  public int memory() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateMemory(int memory) { int o = __offset(26); if (o != 0) { bb.put(o + bb_pos, (byte)memory); return true; } else { return false; } }
  public int textVar() { int o = __offset(28); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateTextVar(int text_var) { int o = __offset(28); if (o != 0) { bb.putShort(o + bb_pos, (short)text_var); return true; } else { return false; } }
  public int feeling() { int o = __offset(30); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateFeeling(int feeling) { int o = __offset(30); if (o != 0) { bb.put(o + bb_pos, (byte)feeling); return true; } else { return false; } }
  public int intensity() { int o = __offset(32); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateIntensity(int intensity) { int o = __offset(32); if (o != 0) { bb.put(o + bb_pos, (byte)intensity); return true; } else { return false; } }
  public long hash2() { int o = __offset(34); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateHash2(long hash2) { int o = __offset(34); if (o != 0) { bb.putLong(o + bb_pos, hash2); return true; } else { return false; } }
  public int otGender() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateOtGender(int ot_gender) { int o = __offset(36); if (o != 0) { bb.put(o + bb_pos, (byte)ot_gender); return true; } else { return false; } }
  public int requiredForm() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateRequiredForm(int required_form) { int o = __offset(38); if (o != 0) { bb.put(o + bb_pos, (byte)required_form); return true; } else { return false; } }
  public int requiredSpecies() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateRequiredSpecies(int required_species) { int o = __offset(40); if (o != 0) { bb.putInt(o + bb_pos, required_species); return true; } else { return false; } }
  public int requiredNature() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateRequiredNature(int required_nature) { int o = __offset(42); if (o != 0) { bb.putInt(o + bb_pos, required_nature); return true; } else { return false; } }
  public int unknownRequirement() { int o = __offset(44); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateUnknownRequirement(int unknown_requirement) { int o = __offset(44); if (o != 0) { bb.put(o + bb_pos, (byte)unknown_requirement); return true; } else { return false; } }
  public int shinyLock() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateShinyLock(int shiny_lock) { int o = __offset(46); if (o != 0) { bb.putInt(o + bb_pos, shiny_lock); return true; } else { return false; } }
  public int nature() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateNature(int nature) { int o = __offset(48); if (o != 0) { bb.putInt(o + bb_pos, nature); return true; } else { return false; } }
  public int gender() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateGender(int gender) { int o = __offset(50); if (o != 0) { bb.put(o + bb_pos, (byte)gender); return true; } else { return false; } }
  public byte ivSpe() { int o = __offset(52); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateIvSpe(byte iv_spe) { int o = __offset(52); if (o != 0) { bb.put(o + bb_pos, iv_spe); return true; } else { return false; } }
  public byte ivAtk() { int o = __offset(54); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateIvAtk(byte iv_atk) { int o = __offset(54); if (o != 0) { bb.put(o + bb_pos, iv_atk); return true; } else { return false; } }
  public byte ivDef() { int o = __offset(56); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateIvDef(byte iv_def) { int o = __offset(56); if (o != 0) { bb.put(o + bb_pos, iv_def); return true; } else { return false; } }
  public byte ivHp() { int o = __offset(58); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateIvHp(byte iv_hp) { int o = __offset(58); if (o != 0) { bb.put(o + bb_pos, iv_hp); return true; } else { return false; } }
  public byte ivSpa() { int o = __offset(60); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateIvSpa(byte iv_spa) { int o = __offset(60); if (o != 0) { bb.put(o + bb_pos, iv_spa); return true; } else { return false; } }
  public byte ivSpd() { int o = __offset(62); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateIvSpd(byte iv_spd) { int o = __offset(62); if (o != 0) { bb.put(o + bb_pos, iv_spd); return true; } else { return false; } }
  public int abilityNumber() { int o = __offset(64); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateAbilityNumber(int ability_number) { int o = __offset(64); if (o != 0) { bb.put(o + bb_pos, (byte)ability_number); return true; } else { return false; } }
  public int relearn1() { int o = __offset(66); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateRelearn1(int relearn1) { int o = __offset(66); if (o != 0) { bb.putShort(o + bb_pos, (short)relearn1); return true; } else { return false; } }
  public int relearn2() { int o = __offset(68); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateRelearn2(int relearn2) { int o = __offset(68); if (o != 0) { bb.putShort(o + bb_pos, (short)relearn2); return true; } else { return false; } }
  public int relearn3() { int o = __offset(70); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateRelearn3(int relearn3) { int o = __offset(70); if (o != 0) { bb.putShort(o + bb_pos, (short)relearn3); return true; } else { return false; } }
  public int relearn4() { int o = __offset(72); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateRelearn4(int relearn4) { int o = __offset(72); if (o != 0) { bb.putShort(o + bb_pos, (short)relearn4); return true; } else { return false; } }

  public static int createSwShTradeEncounter(FlatBufferBuilder builder,
      int form,
      int dynamax_level,
      int ball_item_id,
      int field_03,
      long hash0,
      boolean can_gigantamax,
      int held_item,
      int level,
      int species,
      long hash1,
      int trainer_id,
      int memory,
      int text_var,
      int feeling,
      int intensity,
      long hash2,
      int ot_gender,
      int required_form,
      int required_species,
      int required_nature,
      int unknown_requirement,
      int shiny_lock,
      int nature,
      int gender,
      byte iv_spe,
      byte iv_atk,
      byte iv_def,
      byte iv_hp,
      byte iv_spa,
      byte iv_spd,
      int ability_number,
      int relearn1,
      int relearn2,
      int relearn3,
      int relearn4) {
    builder.startTable(35);
    SwShTradeEncounter.addHash2(builder, hash2);
    SwShTradeEncounter.addHash1(builder, hash1);
    SwShTradeEncounter.addHash0(builder, hash0);
    SwShTradeEncounter.addNature(builder, nature);
    SwShTradeEncounter.addShinyLock(builder, shiny_lock);
    SwShTradeEncounter.addRequiredNature(builder, required_nature);
    SwShTradeEncounter.addRequiredSpecies(builder, required_species);
    SwShTradeEncounter.addTrainerId(builder, trainer_id);
    SwShTradeEncounter.addSpecies(builder, species);
    SwShTradeEncounter.addHeldItem(builder, held_item);
    SwShTradeEncounter.addField03(builder, field_03);
    SwShTradeEncounter.addBallItemId(builder, ball_item_id);
    SwShTradeEncounter.addRelearn4(builder, relearn4);
    SwShTradeEncounter.addRelearn3(builder, relearn3);
    SwShTradeEncounter.addRelearn2(builder, relearn2);
    SwShTradeEncounter.addRelearn1(builder, relearn1);
    SwShTradeEncounter.addTextVar(builder, text_var);
    SwShTradeEncounter.addAbilityNumber(builder, ability_number);
    SwShTradeEncounter.addIvSpd(builder, iv_spd);
    SwShTradeEncounter.addIvSpa(builder, iv_spa);
    SwShTradeEncounter.addIvHp(builder, iv_hp);
    SwShTradeEncounter.addIvDef(builder, iv_def);
    SwShTradeEncounter.addIvAtk(builder, iv_atk);
    SwShTradeEncounter.addIvSpe(builder, iv_spe);
    SwShTradeEncounter.addGender(builder, gender);
    SwShTradeEncounter.addUnknownRequirement(builder, unknown_requirement);
    SwShTradeEncounter.addRequiredForm(builder, required_form);
    SwShTradeEncounter.addOtGender(builder, ot_gender);
    SwShTradeEncounter.addIntensity(builder, intensity);
    SwShTradeEncounter.addFeeling(builder, feeling);
    SwShTradeEncounter.addMemory(builder, memory);
    SwShTradeEncounter.addLevel(builder, level);
    SwShTradeEncounter.addCanGigantamax(builder, can_gigantamax);
    SwShTradeEncounter.addDynamaxLevel(builder, dynamax_level);
    SwShTradeEncounter.addForm(builder, form);
    return SwShTradeEncounter.endSwShTradeEncounter(builder);
  }

  public static void startSwShTradeEncounter(FlatBufferBuilder builder) { builder.startTable(35); }
  public static void addForm(FlatBufferBuilder builder, int form) { builder.addByte(0, (byte)form, (byte)0); }
  public static void addDynamaxLevel(FlatBufferBuilder builder, int dynamaxLevel) { builder.addByte(1, (byte)dynamaxLevel, (byte)0); }
  public static void addBallItemId(FlatBufferBuilder builder, int ballItemId) { builder.addInt(2, ballItemId, 0); }
  public static void addField03(FlatBufferBuilder builder, int field03) { builder.addInt(3, field03, 0); }
  public static void addHash0(FlatBufferBuilder builder, long hash0) { builder.addLong(4, hash0, 0L); }
  public static void addCanGigantamax(FlatBufferBuilder builder, boolean canGigantamax) { builder.addBoolean(5, canGigantamax, false); }
  public static void addHeldItem(FlatBufferBuilder builder, int heldItem) { builder.addInt(6, heldItem, 0); }
  public static void addLevel(FlatBufferBuilder builder, int level) { builder.addByte(7, (byte)level, (byte)0); }
  public static void addSpecies(FlatBufferBuilder builder, int species) { builder.addInt(8, species, 0); }
  public static void addHash1(FlatBufferBuilder builder, long hash1) { builder.addLong(9, hash1, 0L); }
  public static void addTrainerId(FlatBufferBuilder builder, int trainerId) { builder.addInt(10, trainerId, 0); }
  public static void addMemory(FlatBufferBuilder builder, int memory) { builder.addByte(11, (byte)memory, (byte)0); }
  public static void addTextVar(FlatBufferBuilder builder, int textVar) { builder.addShort(12, (short)textVar, (short)0); }
  public static void addFeeling(FlatBufferBuilder builder, int feeling) { builder.addByte(13, (byte)feeling, (byte)0); }
  public static void addIntensity(FlatBufferBuilder builder, int intensity) { builder.addByte(14, (byte)intensity, (byte)0); }
  public static void addHash2(FlatBufferBuilder builder, long hash2) { builder.addLong(15, hash2, 0L); }
  public static void addOtGender(FlatBufferBuilder builder, int otGender) { builder.addByte(16, (byte)otGender, (byte)0); }
  public static void addRequiredForm(FlatBufferBuilder builder, int requiredForm) { builder.addByte(17, (byte)requiredForm, (byte)0); }
  public static void addRequiredSpecies(FlatBufferBuilder builder, int requiredSpecies) { builder.addInt(18, requiredSpecies, 0); }
  public static void addRequiredNature(FlatBufferBuilder builder, int requiredNature) { builder.addInt(19, requiredNature, 0); }
  public static void addUnknownRequirement(FlatBufferBuilder builder, int unknownRequirement) { builder.addByte(20, (byte)unknownRequirement, (byte)0); }
  public static void addShinyLock(FlatBufferBuilder builder, int shinyLock) { builder.addInt(21, shinyLock, 0); }
  public static void addNature(FlatBufferBuilder builder, int nature) { builder.addInt(22, nature, 0); }
  public static void addGender(FlatBufferBuilder builder, int gender) { builder.addByte(23, (byte)gender, (byte)0); }
  public static void addIvSpe(FlatBufferBuilder builder, byte ivSpe) { builder.addByte(24, ivSpe, 0); }
  public static void addIvAtk(FlatBufferBuilder builder, byte ivAtk) { builder.addByte(25, ivAtk, 0); }
  public static void addIvDef(FlatBufferBuilder builder, byte ivDef) { builder.addByte(26, ivDef, 0); }
  public static void addIvHp(FlatBufferBuilder builder, byte ivHp) { builder.addByte(27, ivHp, 0); }
  public static void addIvSpa(FlatBufferBuilder builder, byte ivSpa) { builder.addByte(28, ivSpa, 0); }
  public static void addIvSpd(FlatBufferBuilder builder, byte ivSpd) { builder.addByte(29, ivSpd, 0); }
  public static void addAbilityNumber(FlatBufferBuilder builder, int abilityNumber) { builder.addByte(30, (byte)abilityNumber, (byte)0); }
  public static void addRelearn1(FlatBufferBuilder builder, int relearn1) { builder.addShort(31, (short)relearn1, (short)0); }
  public static void addRelearn2(FlatBufferBuilder builder, int relearn2) { builder.addShort(32, (short)relearn2, (short)0); }
  public static void addRelearn3(FlatBufferBuilder builder, int relearn3) { builder.addShort(33, (short)relearn3, (short)0); }
  public static void addRelearn4(FlatBufferBuilder builder, int relearn4) { builder.addShort(34, (short)relearn4, (short)0); }
  public static int endSwShTradeEncounter(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SwShTradeEncounter get(int j) { return get(new SwShTradeEncounter(), j); }
    public SwShTradeEncounter get(SwShTradeEncounter obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

